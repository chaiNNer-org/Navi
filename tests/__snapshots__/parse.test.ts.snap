// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Expression parsing 1`] = `
">>> /* some comment */ 0 // another comment
>>>     // and another
0

>>> 0
0

>>> 123
123

>>> -123
-123

>>> -123e45
-1.23e+47

>>> -123E+45
-1.23e+47

>>> 123e-45
1.23e-43

>>> 123.456e-45
1.23456e-43

>>> -123.456E-45
-1.23456e-43

>>> nan
nan

>>> inf
inf

>>> -inf
-inf

>>> 1..2
1..2

>>> 1..2.5
1..2.5

>>> 1e2..2.5e4
100..25000

>>> -inf..inf
-inf..inf

>>> -inf..0
-inf..0

>>> ..
-inf..inf

>>> ..0
-inf..0

>>> 1..
1..inf

>>> 1!..2
1!..2

>>> 1!..2.5
1!..2.5

>>> 1e2!..2.5e4
100!..25000

>>> -inf!..inf
-inf!..inf

>>> -inf!..0
-inf!..0

>>> !..
-inf!..inf

>>> !..0
-inf!..0

>>> 1!..
1!..inf

>>> 1..!2
1..!2

>>> 1..!2.5
1..!2.5

>>> 1e2..!2.5e4
100..!25000

>>> -inf..!inf
-inf..!inf

>>> -inf..!0
-inf..!0

>>> ..!
-inf..!inf

>>> ..!0
-inf..!0

>>> 1..!
1..!inf

>>> 1!..!2
nonInt(1..2)

>>> 1!..!2.5
1!..!2.5

>>> 1e2!..!2.5e4
100!..!25000

>>> -inf!..!inf
-inf!..!inf

>>> -inf!..!0
-inf!..!0

>>> !..!
-inf!..!inf

>>> !..!0
-inf!..!0

>>> 1!..!
1!..!inf

>>> int(1..2)
int(1..2)

>>>   int   (   1..2   )  
int(1..2)

>>> int(1e2..2.5e4)
int(100..25000)

>>> int(-inf..inf)
int(-inf..inf)

>>> int(-inf..0)
int(-inf..0)

>>> int(..)
int(-inf..inf)

>>> int(..0)
int(-inf..0)

>>> int(1..)
int(1..inf)

>>> nonInt(1..2)
nonInt(1..2)

>>>   nonInt   (   1..2   )  
nonInt(1..2)

>>> nonInt(1e2..2.5e4)
nonInt(100..25000)

>>> nonInt(-inf..inf)
nonInt(-inf..inf)

>>> nonInt(-inf..0)
nonInt(-inf..0)

>>> nonInt(..)
nonInt(-inf..inf)

>>> nonInt(..0)
nonInt(-inf..0)

>>> nonInt(1..)
nonInt(1..inf)

>>> ""
""

>>> "foo"
"foo"

>>> "foo\\r\\n\\""
"foo\\r\\n\\""

>>> foo()
foo()

>>> foo(1)
foo(1)

>>> foo(1, )
foo(1)

>>> foo(1, 2)
foo(1, 2)

>>> foo(1, 2,)
foo(1, 2)

>>> foo (  1  , 2  )
foo(1, 2)

>>> any()
any()

>>> never()
never()

>>> number()
number()

>>> string()
string()

>>> int()
int()

>>> uint()
uint()

>>> foo::bar::baz()
foo::bar::baz()

>>> null
null

>>> foo
foo

>>> foo {}
foo

>>> foo { foo: 3 }
foo { foo: 3 }

>>> foo { foo: uint }
foo { foo: uint }

>>> Image { width: uint, height: uint, channels: int(1..inf) }
Image { width: uint, height: uint, channels: int(1..inf) }

>>> bar { any: any, never: never, number: number, string: string }
bar {
    any: any,
    never: never,
    number: number,
    string: string,
}

>>> foo::bar::baz
foo::bar::baz

>>> foo::bar::baz {}
foo::bar::baz

>>> Image { ...never }
Image { ...never }

>>> Image { ...i, height: uint, channels: int(1..inf) }
Image { ...i, height: uint, channels: int(1..inf) }

>>> Image { .....3 }
Image { ...-inf..3 }

>>> Image { ...i , }
Image { ...i }

>>> Image { ...i, ...j }
Image { ...i, ...j }

>>> Image { width, height, channels: 3 }
Image { width: width, height: height, channels: 3 }

>>> match never {}
match never {}

>>> match (a) {}
match a {}

>>> match a|b {}
match (a | b) {}

>>> match a {}
match a {}

>>> match a {} {}
match a {}

>>> match a { foo: uint } { number => 1 }
match a { foo: uint } {
    number => 1,
}

>>> match a { number => 1, }
match a {
    number as a => 1,
}

>>> match a { number => 1, string => 2, any => 5 }
match a {
    number as a => 1,
    string as a => 2,
    _ as a => 5,
}

>>> match a { number => 1, string => 2, _ => 5 }
match a {
    number as a => 1,
    string as a => 2,
    _ as a => 5,
}

>>> match a { _ => 234, number => 1, string => 2, _ => 5 }
match a {
    _ as a => 234,
    number as a => 1,
    string as a => 2,
    _ as a => 5,
}

>>> match a {  number as foo => add(foo, 1), _ as foo => foo, }
match a {
    number as __temp => {
        let a = __temp;
        let foo = __temp;
        add(foo, 1)
    },
    _ as __temp => {
        let a = __temp;
        let foo = __temp;
        foo
    },
}

>>> match a { 1 | 2 as foo => add(foo, 1), "bar" => "baz", _ as foo => foo, }
match a {
    1 | 2 as __temp => {
        let a = __temp;
        let foo = __temp;
        add(foo, 1)
    },
    "bar" as a => "baz",
    _ as __temp => {
        let a = __temp;
        let foo = __temp;
        foo
    },
}

>>> match a { foo::bar => baz, }
match a {
    foo::bar as a => baz,
}

>>> if a { 1 } else { 2 }
match a {
    true => 1,
    false => 2,
}

>>> if (a) { 1 } else { 2 }
match a {
    true => 1,
    false => 2,
}

>>> if a { 1 } else if b { 2 } else { 3}
match a {
    true => 1,
    false => match b {
        true => 2,
        false => 3,
    },
}

>>> a.b.c.d.e.f
a.b.c.d.e.f

>>> foo::bar.baz
foo::bar.baz

>>> foo { foo: uint }.foo
foo { foo: uint }.foo

>>> a::and::or::not::b.c
a::and::or::not::b.c

>>> a | b | c | d
a | b | c | d

>>> a & b & c & d
a & b & c & d

>>> a & b | c & d
(a & b) | (c & d)

>>> a == b
any::eq(a, b)

>>> a != b
any::neq(a, b)

>>> a > b
number::gt(a, b)

>>> a >= b
number::gte(a, b)

>>> a < b
number::lt(a, b)

>>> a <= b
number::lte(a, b)

>>> a == b & c
any::eq(a, b & c)

>>> a == b | c
any::eq(a, b | c)

>>> a == b * c
any::eq(a, number::mul(b, c))

>>> a + b - c + d - e + f
number::add(a, b, number::neg(c), d, number::neg(e), f)

>>> a * b / c * d / e * f
number::mul(a, b, number::rec(c), d, number::rec(e), f)

>>> a * (-b+c) / -2
number::mul(
    a,
    number::add(number::neg(b), c),
    number::rec(-2),
)

>>> -a--b
number::add(number::neg(a), number::neg(number::neg(b)))

>>> -a+-b
number::add(number::neg(a), number::neg(b))

>>> a + b * c
number::add(a, number::mul(b, c))

>>> -100 - -100
number::add(-100, number::neg(-100))

>>> a---100
number::add(a, number::neg(number::neg(-100)))

>>> a**b
number::pow(a, b)

>>> (-a)**b
number::pow(number::neg(a), b)

>>> -(a**b)
number::neg(number::pow(a, b))

>>> a*b**c*d
number::mul(a, number::pow(b, c), d)

>>> not a and b or c
bool::or(bool::and(bool::not(a), b), c)

>>> a and b or c
bool::or(bool::and(a, b), c)

>>> bool::and(a, b or c)
bool::and(a, bool::or(b, c))

>>> a::and and b::or or c::not
bool::or(bool::and(a::and, b::or), c::not)

>>> not not a
bool::not(bool::not(a))

>>> not a * b == c
bool::not(any::eq(number::mul(a, b), c))

>>> { 0 }
0

>>> { let foo = 0; foo }
{
    let foo = 0;
    foo
}

>>> { def getFoo() = 0; getFoo() }
{
    def getFoo() {
        0
    }
    getFoo()
}

>>> { def getFoo() { 0 } getFoo() }
{
    def getFoo() {
        0
    }
    getFoo()
}

>>> { struct Foo { bar: 0 } Foo.bar }
{
    struct Foo {
        bar: 0,
    }
    Foo.bar
}

>>> struct false; false
{
    struct false;
    false
}

>>> struct Image { width: uint, height: uint, channels: int(1..) } Image
{
    struct Image {
        width: uint,
        height: uint,
        channels: int(1..inf),
    }
    Image
}

>>> struct foo::bar; foo::bar
{
    struct foo::bar;
    foo::bar
}

>>> let bool = true | false; bool
{
    let bool = true | false;
    bool
}

>>> let std::bool = true | false; std::bool
{
    let std::bool = true | false;
    std::bool
}

>>> let a: int = 0; a
{
    let a: int = 0;
    a
}

>>> let a: any = 0; a
{
    let a = 0;
    a
}

>>> enum Direction { North, East, South, West } Direction
{
    let Direction = Direction::North
      | Direction::East
      | Direction::South
      | Direction::West;
    struct Direction::North;
    struct Direction::East;
    struct Direction::South;
    struct Direction::West;
    Direction
}

>>> enum Empty { } Empty
{
    let Empty = /* empty union */ never;
    Empty
}

>>> def inc(a: number) = add(a, 1); inc(0)
{
    def inc(a: number) {
        add(a, 1)
    }
    inc(0)
}

>>> def math :: inc(a: number) = add(a, 1); math::inc(0)
{
    def math::inc(a: number) {
        add(a, 1)
    }
    math::inc(0)
}

>>> def foo(a: int): int = a; foo(int)
{
    def foo(a: int): int {
        a
    }
    foo(int)
}

>>> def foo(a: int): int { a + 1 } foo(int)
{
    def foo(a: int): int {
        number::add(a, 1)
    }
    foo(int)
}

>>> def foo(a: uint): Image { width: uint } { let width = a + 1; Image { width: width } } foo(int)
{
    def foo(a: uint): Image { width: uint } {
        let width = number::add(a, 1);
        Image { width: width }
    }
    foo(int)
}

>>> def foo(a: uint): Image { width } { let width = a + 1; Image { width } } foo(int)
{
    def foo(a: uint): Image { width: width } {
        let width = number::add(a, 1);
        Image { width: width }
    }
    foo(int)
}

>>> def foo(a: uint): Image { width } { width } foo(int)
{
    def foo(a: uint): Image { width: width } {
        width
    }
    foo(int)
}"
`;

exports[`Invalid expression parsing 1`] = `
">>>
SyntaxError: At 1:0: mismatched input '<EOF>' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> öäü0
SyntaxError: At 1:0: token recognition error at: 'ö'

>>> +0
SyntaxError: At 1:0: extraneous input '+' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> +123
SyntaxError: At 1:0: extraneous input '+' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> .2e4
SyntaxError: At 1:0: extraneous input '.' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> 2.
SyntaxError: At 1:2: missing Identifier at '<EOF>'

>>> +inf
SyntaxError: At 1:0: extraneous input '+' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> 1..1
Error: min=1 must be < max=1

>>> 2..1
Error: min=2 must be < max=1

>>> -inf..nan
Error: min=-Infinity and max=NaN cannot be NaN

>>> nan..nan
Error: min=NaN and max=NaN cannot be NaN

>>> int(1..2.5)
Error: min=1 and max=2.5 must be integers or infinity

>>> int(1..1)
Error: min=1 must be < max=1

>>> int(2..1)
Error: min=2 must be < max=1

>>> int(-inf..nan)
Error: min=-Infinity and max=NaN cannot be NaN

>>> int(nan..nan)
Error: min=NaN and max=NaN cannot be NaN

>>> nonInt(1..2.5)
Error: min=1 and max=2.5 must be integers or infinity

>>> nonInt(1..1)
Error: min=1 must be < max=1

>>> nonInt(2..1)
Error: min=2 must be < max=1

>>> nonInt(-inf..nan)
Error: min=-Infinity and max=NaN cannot be NaN

>>> nonInt(nan..nan)
Error: min=NaN and max=NaN cannot be NaN

>>> """
SyntaxError: At 1:2: token recognition error at: '"'

>>> "\\g"
SyntaxError: Bad escaped character in JSON at position 2

>>> "
>>>     "
SyntaxError: At 1:0: token recognition error at: '"
'

>>> as()
SyntaxError: At 1:0: extraneous input 'as' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> match()
SyntaxError: At 1:6: mismatched input ')' expecting {'{', '(', 'if', 'match', 'not', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> struct()
SyntaxError: At 1:6: mismatched input '(' expecting Identifier

>>> let()
SyntaxError: At 1:3: mismatched input '(' expecting Identifier

>>> def()
SyntaxError: At 1:3: missing Identifier at '('

>>> bar.baz()
SyntaxError: At 1:7: mismatched input '(' expecting <EOF>

>>> foo::bar.baz()
SyntaxError: At 1:12: mismatched input '(' expecting <EOF>

>>> match { }
SyntaxError: At 1:8: mismatched input '}' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> as { }
SyntaxError: At 1:0: extraneous input 'as' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> struct { }
SyntaxError: At 1:7: missing Identifier at '{'

>>> def { }
SyntaxError: At 1:4: mismatched input '{' expecting Identifier

>>> let { }
SyntaxError: At 1:4: mismatched input '{' expecting Identifier

>>> foo { as: as }
SyntaxError: At 1:4: mismatched input '{' expecting <EOF>

>>> Image { , height: uint }
SyntaxError: At 1:6: mismatched input '{' expecting <EOF>

>>> Image { height: uint, ...i,}
SyntaxError: At 1:22: no viable alternative at input ',...'

>>> match a
SyntaxError: At 1:7: mismatched input '<EOF>' expecting '{'

>>> match a { foo: uint }
SyntaxError: At 1:21: mismatched input '<EOF>' expecting '{'

>>> match a { foo as bar::baz }
SyntaxError: At 1:20: mismatched input '::' expecting '=>'

>>> if a
SyntaxError: At 1:4: mismatched input '<EOF>' expecting '{'

>>> if a 1 else 2
SyntaxError: At 1:5: missing '{' at '1'

>>> if a { 2 }
SyntaxError: At 1:10: mismatched input '<EOF>' expecting 'else'

>>> if a { 2 } else if b { 3 }
SyntaxError: At 1:26: mismatched input '<EOF>' expecting 'else'

>>> a.match
SyntaxError: At 1:2: mismatched input 'match' expecting Identifier

>>> a.as
SyntaxError: At 1:2: mismatched input 'as' expecting Identifier

>>> a.def
SyntaxError: At 1:2: mismatched input 'def' expecting Identifier

>>> a.let
SyntaxError: At 1:2: mismatched input 'let' expecting Identifier

>>> a.struct
SyntaxError: At 1:2: mismatched input 'struct' expecting Identifier

>>> a.1
SyntaxError: At 1:2: mismatched input '1' expecting Identifier

>>> a.b.(c.d).e.f
SyntaxError: At 1:4: extraneous input '(' expecting Identifier

>>> a.
SyntaxError: At 1:2: missing Identifier at '<EOF>'

>>> foo.bar::baz
SyntaxError: At 1:7: mismatched input '::' expecting <EOF>

>>> a | b |
SyntaxError: At 1:7: mismatched input '<EOF>' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> a & b &
SyntaxError: At 1:7: mismatched input '<EOF>' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> | b
SyntaxError: At 1:0: extraneous input '|' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> & b
SyntaxError: At 1:0: extraneous input '&' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> a === b
SyntaxError: At 1:4: extraneous input '=' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> a !== b
SyntaxError: At 1:4: extraneous input '=' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> a == b | c == d
SyntaxError: At 1:11: mismatched input '==' expecting <EOF>

>>> a == b & c == d
SyntaxError: At 1:11: mismatched input '==' expecting <EOF>

>>> a == b || c == d
SyntaxError: At 1:8: extraneous input '|' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> a == b && c == d
SyntaxError: At 1:8: extraneous input '&' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> a-
SyntaxError: At 1:2: mismatched input '<EOF>' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> a+
SyntaxError: At 1:2: mismatched input '<EOF>' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> a*
SyntaxError: At 1:2: mismatched input '<EOF>' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> a/
SyntaxError: At 1:2: mismatched input '<EOF>' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> +a
SyntaxError: At 1:0: extraneous input '+' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> *a
SyntaxError: At 1:0: extraneous input '*' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> /a
SyntaxError: At 1:0: extraneous input '/' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> --a
SyntaxError: At 1:1: extraneous input '-' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier}

>>> a+--a
SyntaxError: At 1:3: extraneous input '-' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier}

>>> a++a
SyntaxError: At 1:2: extraneous input '+' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> a* *a
SyntaxError: At 1:3: extraneous input '*' expecting {'{', '(', 'if', 'match', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> -a**a
Error: Unable to convert \`-a**a\`: Negation cannot be applied to exponentiation. -a**b is not allowed. Write either -(a**b) or (-a)**b instead.

>>> a-100
SyntaxError: At 1:1: extraneous input '-100' expecting <EOF>

>>> not and a
SyntaxError: At 1:4: extraneous input 'and' expecting {'{', '(', 'if', 'match', 'not', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> and and b
SyntaxError: At 1:0: mismatched input 'and' expecting {'{', '(', 'def', 'enum', 'if', 'let', 'match', 'not', 'struct', IntInterval, NonIntInterval, IntervalInclusive, IntervalMinExclusive, IntervalMaxExclusive, IntervalExclusive, Number, String, Identifier, '-'}

>>> struct A { a::bar: bool } A
SyntaxError: At 1:12: mismatched input '::' expecting ':'

>>> enum Direction { North, East, South, S::West } Direction
SyntaxError: At 1:38: no viable alternative at input ',S::'

>>> def inc(a::b: number) = add(a, 1); inc(0)
SyntaxError: At 1:9: mismatched input '::' expecting ':'"
`;

exports[`Parse complex expressions 1`] = `
">>> def bool::not(value: bool): bool {
>>>     match value {
>>>         true => false,
>>>         false => true
>>>     }
>>> }
>>> not true
{
    def bool::not(value: bool): bool {
        match value {
            true as value => false,
            false as value => true,
        }
    }
    bool::not(true)
}

>>> def bool::not(value: bool): bool {
>>>     if value { false } else { true }
>>> }
>>> not true
{
    def bool::not(value: bool): bool {
        match value {
            true => false,
            false => true,
        }
    }
    bool::not(true)
}

>>> def any::neq(a: any, b: any): bool {
>>>     not a == b
>>> }
>>> 1 != 2
{
    def any::neq(a: any, b: any): bool {
        bool::not(any::eq(a, b))
    }
    any::neq(1, 2)
}

>>> def string::includes(s: string, needle: string): bool {
>>>     string::indexOf(s, needle) != nan
>>> }
>>> def string::startsWith(s: string, needle: string): bool {
>>>     string::indexOf(s, needle) == 0
>>> }
>>> def string::endsWith(s: string, needle: string): bool {
>>>     let l = string::len(needle);
>>>     string::slice(s, -l, l) == needle
>>> }
>>> string::endsWith(s, "foo")
{
    def string::includes(s: string, needle: string): bool {
        any::neq(string::indexOf(s, needle), nan)
    }
    def string::startsWith(s: string, needle: string): bool {
        any::eq(string::indexOf(s, needle), 0)
    }
    def string::endsWith(s: string, needle: string): bool {
        let l = string::len(needle);
        any::eq(string::slice(s, number::neg(l), l), needle)
    }
    string::endsWith(s, "foo")
}

>>> let i = Input0;
>>> let mode = Input1;
>>>
>>> let scale = Input2;
>>> let width = Input3;
>>> let height = Input4;
>>>
>>> match mode {
>>>     ImageResizeMode::Percentage => Image {
>>>         width: max(1, int & round(i.width * scale / 100)),
>>>         height: max(1, int & round(i.height * scale / 100)),
>>>         channels: i.channels,
>>>     },
>>>     ImageResizeMode::Absolute => Image {
>>>         width: width,
>>>         height: height,
>>>         channels: i.channels,
>>>     },
>>> }
{
    let i = Input0;
    let mode = Input1;
    let scale = Input2;
    let width = Input3;
    let height = Input4;
    match mode {
        ImageResizeMode::Percentage as mode => Image {
            width: max(
                1,
                int & round(number::mul(i.width, scale, number::rec(100))),
            ),
            height: max(
                1,
                int & round(number::mul(i.height, scale, number::rec(100))),
            ),
            channels: i.channels,
        },
        ImageResizeMode::Absolute as mode => {
            Image { width: width, height: height, channels: i.channels }
        },
    }
}

>>> struct Size { width: uint, height: uint }
>>>
>>> let w = Input0.width;
>>> let h = Input0.height;
>>> let target = Input1;
>>> let side = Input2;
>>> let condition = Input4;
>>>
>>> def compareCondition(b: uint): bool {
>>>     match condition {
>>>         ResizeCondition::Both => false,
>>>         ResizeCondition::Downscale => target > b,
>>>         ResizeCondition::Upscale => target < b
>>>     }
>>> }
>>>
>>> let same = Size { width: w, height: h };
>>>
>>> let outSize = match side {
>>>     SideSelection::Width => if compareCondition(w) { same } else {
>>>         Size {
>>>             width: target,
>>>             height: max(round((target / w) * h), 1)
>>>         }
>>>     },
>>>     SideSelection::Height => if compareCondition(h) { same } else {
>>>         Size {
>>>             width: max(round((target / h) * w), 1),
>>>             height: target
>>>         }
>>>     },
>>>     SideSelection::ShorterSide => if compareCondition(min(h, w)) { same } else {
>>>         Size {
>>>             width: max(round((target / min(h, w)) * w), 1),
>>>             height: max(round((target / min(h, w)) * h), 1)
>>>         }
>>>     },
>>>     SideSelection::LongerSide => if compareCondition(max(h, w)) { same } else {
>>>         Size {
>>>             width: max(round((target / max(h, w)) * w), 1),
>>>             height: max(round((target / max(h, w)) * h), 1)
>>>         }
>>>     },
>>> };
>>>
>>> Image {
>>>     width: outSize.width,
>>>     height: outSize.height,
>>>     channels: Input0.channels
>>> }
{
    struct Size {
        width: uint,
        height: uint,
    }
    let w = Input0.width;
    let h = Input0.height;
    let target = Input1;
    let side = Input2;
    let condition = Input4;
    def compareCondition(b: uint): bool {
        match condition {
            ResizeCondition::Both as condition => false,
            ResizeCondition::Downscale as condition => {
                number::gt(target, b)
            },
            ResizeCondition::Upscale as condition => {
                number::lt(target, b)
            },
        }
    }
    let same = Size { width: w, height: h };
    let outSize = match side {
        SideSelection::Width as side => match compareCondition(w) {
            true => same,
            false => Size {
                width: target,
                height: max(
                    round(number::mul(number::mul(target, number::rec(w)), h)),
                    1,
                ),
            },
        },
        SideSelection::Height as side => match compareCondition(h) {
            true => same,
            false => Size {
                width: max(
                    round(number::mul(number::mul(target, number::rec(h)), w)),
                    1,
                ),
                height: target,
            },
        },
        SideSelection::ShorterSide as side => {
            match compareCondition(min(h, w)) {
                true => same,
                false => Size {
                    width: max(
                        round(
                            number::mul(number::mul(target, number::rec(min(h, w))), w)
                        ),
                        1,
                    ),
                    height: max(
                        round(
                            number::mul(number::mul(target, number::rec(min(h, w))), h)
                        ),
                        1,
                    ),
                },
            }
        },
        SideSelection::LongerSide as side => {
            match compareCondition(max(h, w)) {
                true => same,
                false => Size {
                    width: max(
                        round(
                            number::mul(number::mul(target, number::rec(max(h, w))), w)
                        ),
                        1,
                    ),
                    height: max(
                        round(
                            number::mul(number::mul(target, number::rec(max(h, w))), h)
                        ),
                        1,
                    ),
                },
            }
        },
    };
    Image {
        width: outSize.width,
        height: outSize.height,
        channels: Input0.channels,
    }
}

>>> // This is a near verbatim copy of PIL's rotate code
>>> // to get the size of the rotated image.
>>> // https://pillow.readthedocs.io/en/stable/_modules/PIL/Image.html#Image.rotate
>>> struct Point { x: number, y: number }
>>>
>>> let img = Input0;
>>> let w = img.width;
>>> let h = img.height;
>>> let rot_center = Point {
>>>     x: w / 2,
>>>     y: h / 2,
>>> };
>>>
>>> let angleDeg = number::mod(Input1, 360);
>>> let angle = -number::degToRad(angleDeg);
>>> let m0 = number::cos(angle);
>>> let m1 = number::sin(angle);
>>> let m2 = rot_center.x + m0 * -rot_center.x + m1 * -rot_center.y;
>>> let m3 = -number::sin(angle);
>>> let m4 = number::cos(angle);
>>> let m5 = rot_center.y + m3 * -rot_center.x + m4 * -rot_center.y;
>>>
>>> def transform(x: number, y: number) {
>>>     Point {
>>>         x: m0 * x + m1 * y + m2,
>>>         y: m3 * x + m4 * y + m5,
>>>     }
>>> }
>>>
>>> let p0 = transform(0, 0);
>>> let p1 = transform(w, 0);
>>> let p2 = transform(w, h);
>>> let p3 = transform(0, h);
>>>
>>> let expandWidth = Image.width & (
>>>     ceil(max(p0.x, p1.x, p2.x, p3.x))
>>>     - floor(min(p0.x, p1.x, p2.x, p3.x))
>>> );
>>> let expandHeight = Image.height & (
>>>     ceil(max(p0.y, p1.y, p2.y, p3.y))
>>>     - floor(min(p0.y, p1.y, p2.y, p3.y))
>>> );
>>>
>>> struct Size { w: number, h: number }
>>> let imgSize = Size { w: w, h: h };
>>> let transformedSize = match Input3 {
>>>     RotateSizeChange::Crop => imgSize,
>>>     RotateSizeChange::Expand => Size { w: expandWidth, h: expandHeight },
>>> };
>>>
>>> // account for fast paths
>>> let size = match angleDeg {
>>>     0 | 180 | 360 => imgSize,
>>>     90 | 270 => if bool::or(Input3 == RotateSizeChange::Expand, w == h) {
>>>         Size { w: h, h: w }
>>>     } else {
>>>         transformedSize
>>>     },
>>>     _ => transformedSize,
>>> };
>>>
>>> Image {
>>>     width: size.w,
>>>     height: size.h,
>>>     channels: FillColor::getOutputChannels(Input4, img.channels)
>>> }
{
    struct Point {
        x: number,
        y: number,
    }
    let img = Input0;
    let w = img.width;
    let h = img.height;
    let rot_center = Point {
        x: number::mul(w, number::rec(2)),
        y: number::mul(h, number::rec(2)),
    };
    let angleDeg = number::mod(Input1, 360);
    let angle = number::neg(number::degToRad(angleDeg));
    let m0 = number::cos(angle);
    let m1 = number::sin(angle);
    let m2 = number::add(
        rot_center.x,
        number::mul(m0, number::neg(rot_center.x)),
        number::mul(m1, number::neg(rot_center.y)),
    );
    let m3 = number::neg(number::sin(angle));
    let m4 = number::cos(angle);
    let m5 = number::add(
        rot_center.y,
        number::mul(m3, number::neg(rot_center.x)),
        number::mul(m4, number::neg(rot_center.y)),
    );
    def transform(x: number, y: number) {
        Point {
            x: number::add(number::mul(m0, x), number::mul(m1, y), m2),
            y: number::add(number::mul(m3, x), number::mul(m4, y), m5),
        }
    }
    let p0 = transform(0, 0);
    let p1 = transform(w, 0);
    let p2 = transform(w, h);
    let p3 = transform(0, h);
    let expandWidth = Image.width
      & number::add(
            ceil(max(p0.x, p1.x, p2.x, p3.x)),
            number::neg(floor(min(p0.x, p1.x, p2.x, p3.x))),
        );
    let expandHeight = Image.height
      & number::add(
            ceil(max(p0.y, p1.y, p2.y, p3.y)),
            number::neg(floor(min(p0.y, p1.y, p2.y, p3.y))),
        );
    struct Size {
        w: number,
        h: number,
    }
    let imgSize = Size { w: w, h: h };
    let transformedSize = match Input3 {
        RotateSizeChange::Crop as Input3 => imgSize,
        RotateSizeChange::Expand as Input3 => {
            Size { w: expandWidth, h: expandHeight }
        },
    };
    let size = match angleDeg {
        0 | 180 | 360 as angleDeg => imgSize,
        90 | 270 as angleDeg => {
            match bool::or(
                any::eq(Input3, RotateSizeChange::Expand),
                any::eq(w, h),
            ) {
                true => Size { w: h, h: w },
                false => transformedSize,
            }
        },
        _ as angleDeg => transformedSize,
    };
    Image {
        width: size.w,
        height: size.h,
        channels: FillColor::getOutputChannels(Input4, img.channels),
    }
}

>>> struct Foo {
>>>     someLongName: Bar {
>>>         a: number | str | null,
>>>         b: number | str | Baz { a: number },
>>>         c: number,
>>>         d: uint,
>>>         e: number,
>>>         f: str
>>>     }
>>> }
>>> Foo {
>>>     someLongName: Bar {
>>>         a: (x*(-y)+z)/(w*w),
>>>         b: max(0, x*y*z/(-w))
>>>     }
>>> }
{
    struct Foo {
        someLongName: Bar {
            a: number | str | null,
            b: number | str | Baz { a: number },
            c: number,
            d: uint,
            e: number,
            f: str,
        },
    }
    Foo {
        someLongName: Bar {
            a: number::mul(
                number::add(number::mul(x, number::neg(y)), z),
                number::rec(number::mul(w, w)),
            ),
            b: max(0, number::mul(x, y, z, number::rec(number::neg(w)))),
        },
    }
}

>>> let image = Input0;
>>> let coords = Input3;
>>> let x = Input1;
>>> let y = Input2;
>>>
>>> let valid = match coords {
>>>     CoordinateType::Relative => true,
>>>     CoordinateType::Absolute => bool::and(x < image.width, y < image.height),
>>> };
>>>
>>> if valid {
>>>     Color { channels: Input0.channels }
>>> } else {
>>>     never
>>> }
{
    let image = Input0;
    let coords = Input3;
    let x = Input1;
    let y = Input2;
    let valid = match coords {
        CoordinateType::Relative as coords => true,
        CoordinateType::Absolute as coords => bool::and(
            number::lt(x, image.width),
            number::lt(y, image.height),
        ),
    };
    match valid {
        true => Color { channels: Input0.channels },
        false => never,
    }
}"
`;
