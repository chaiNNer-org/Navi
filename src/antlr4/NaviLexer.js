// Generated from src/antlr4/Navi.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,38,283,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,1,1,1,1,
2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,
1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,146,
8,20,1,20,1,20,3,20,150,8,20,1,20,1,20,3,20,154,8,20,1,20,1,20,1,21,3,21,
159,8,21,1,21,1,21,1,21,1,21,3,21,165,8,21,1,22,3,22,168,8,22,1,22,1,22,
1,22,4,22,173,8,22,11,22,12,22,174,3,22,177,8,22,1,22,1,22,3,22,181,8,22,
1,22,3,22,184,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
196,8,22,1,23,1,23,1,23,1,23,5,23,202,8,23,10,23,12,23,205,9,23,1,23,1,23,
1,24,1,24,1,24,5,24,212,8,24,10,24,12,24,215,9,24,3,24,217,8,24,1,25,1,25,
1,26,1,26,5,26,223,8,26,10,26,12,26,226,9,26,1,27,1,27,1,28,1,28,1,29,1,
29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,
1,35,1,36,1,36,1,36,1,37,4,37,253,8,37,11,37,12,37,254,1,37,1,37,1,38,1,
38,1,38,1,38,5,38,263,8,38,10,38,12,38,266,9,38,1,38,1,38,1,39,1,39,1,39,
1,39,5,39,274,8,39,10,39,12,39,277,9,39,1,39,1,39,1,39,1,39,1,39,1,275,0,
40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,0,51,0,53,
25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,
37,79,38,1,0,10,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,0,31,34,
34,92,92,2,0,10,10,13,13,1,0,49,57,3,0,48,57,65,70,97,102,2,0,65,90,97,122,
4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,301,0,1,1,0,0,0,0,3,1,
0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,3,83,1,0,0,0,5,85,1,0,0,0,
7,87,1,0,0,0,9,89,1,0,0,0,11,91,1,0,0,0,13,93,1,0,0,0,15,95,1,0,0,0,17,98,
1,0,0,0,19,100,1,0,0,0,21,102,1,0,0,0,23,104,1,0,0,0,25,106,1,0,0,0,27,109,
1,0,0,0,29,112,1,0,0,0,31,116,1,0,0,0,33,120,1,0,0,0,35,126,1,0,0,0,37,133,
1,0,0,0,39,138,1,0,0,0,41,140,1,0,0,0,43,158,1,0,0,0,45,195,1,0,0,0,47,197,
1,0,0,0,49,216,1,0,0,0,51,218,1,0,0,0,53,220,1,0,0,0,55,227,1,0,0,0,57,229,
1,0,0,0,59,231,1,0,0,0,61,233,1,0,0,0,63,235,1,0,0,0,65,238,1,0,0,0,67,241,
1,0,0,0,69,243,1,0,0,0,71,245,1,0,0,0,73,248,1,0,0,0,75,252,1,0,0,0,77,258,
1,0,0,0,79,269,1,0,0,0,81,82,5,59,0,0,82,2,1,0,0,0,83,84,5,61,0,0,84,4,1,
0,0,0,85,86,5,123,0,0,86,6,1,0,0,0,87,88,5,44,0,0,88,8,1,0,0,0,89,90,5,125,
0,0,90,10,1,0,0,0,91,92,5,40,0,0,92,12,1,0,0,0,93,94,5,41,0,0,94,14,1,0,
0,0,95,96,5,61,0,0,96,97,5,62,0,0,97,16,1,0,0,0,98,99,5,46,0,0,99,18,1,0,
0,0,100,101,5,38,0,0,101,20,1,0,0,0,102,103,5,124,0,0,103,22,1,0,0,0,104,
105,5,58,0,0,105,24,1,0,0,0,106,107,5,58,0,0,107,108,5,58,0,0,108,26,1,0,
0,0,109,110,5,97,0,0,110,111,5,115,0,0,111,28,1,0,0,0,112,113,5,100,0,0,
113,114,5,101,0,0,114,115,5,102,0,0,115,30,1,0,0,0,116,117,5,108,0,0,117,
118,5,101,0,0,118,119,5,116,0,0,119,32,1,0,0,0,120,121,5,109,0,0,121,122,
5,97,0,0,122,123,5,116,0,0,123,124,5,99,0,0,124,125,5,104,0,0,125,34,1,0,
0,0,126,127,5,115,0,0,127,128,5,116,0,0,128,129,5,114,0,0,129,130,5,117,
0,0,130,131,5,99,0,0,131,132,5,116,0,0,132,36,1,0,0,0,133,134,5,101,0,0,
134,135,5,110,0,0,135,136,5,117,0,0,136,137,5,109,0,0,137,38,1,0,0,0,138,
139,5,95,0,0,139,40,1,0,0,0,140,141,5,105,0,0,141,142,5,110,0,0,142,143,
5,116,0,0,143,145,1,0,0,0,144,146,3,75,37,0,145,144,1,0,0,0,145,146,1,0,
0,0,146,147,1,0,0,0,147,149,5,40,0,0,148,150,3,75,37,0,149,148,1,0,0,0,149,
150,1,0,0,0,150,151,1,0,0,0,151,153,3,43,21,0,152,154,3,75,37,0,153,152,
1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,0,155,156,5,41,0,0,156,42,1,0,0,0,
157,159,3,45,22,0,158,157,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,161,
5,46,0,0,161,162,5,46,0,0,162,164,1,0,0,0,163,165,3,45,22,0,164,163,1,0,
0,0,164,165,1,0,0,0,165,44,1,0,0,0,166,168,5,45,0,0,167,166,1,0,0,0,167,
168,1,0,0,0,168,169,1,0,0,0,169,176,3,49,24,0,170,172,5,46,0,0,171,173,7,
0,0,0,172,171,1,0,0,0,173,174,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,
177,1,0,0,0,176,170,1,0,0,0,176,177,1,0,0,0,177,183,1,0,0,0,178,180,7,1,
0,0,179,181,7,2,0,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,
184,3,49,24,0,183,178,1,0,0,0,183,184,1,0,0,0,184,196,1,0,0,0,185,186,5,
105,0,0,186,187,5,110,0,0,187,196,5,102,0,0,188,189,5,45,0,0,189,190,5,105,
0,0,190,191,5,110,0,0,191,196,5,102,0,0,192,193,5,110,0,0,193,194,5,97,0,
0,194,196,5,110,0,0,195,167,1,0,0,0,195,185,1,0,0,0,195,188,1,0,0,0,195,
192,1,0,0,0,196,46,1,0,0,0,197,203,5,34,0,0,198,202,8,3,0,0,199,200,5,92,
0,0,200,202,8,4,0,0,201,198,1,0,0,0,201,199,1,0,0,0,202,205,1,0,0,0,203,
201,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,207,5,34,
0,0,207,48,1,0,0,0,208,217,5,48,0,0,209,213,7,5,0,0,210,212,7,0,0,0,211,
210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,217,1,0,
0,0,215,213,1,0,0,0,216,208,1,0,0,0,216,209,1,0,0,0,217,50,1,0,0,0,218,219,
7,6,0,0,219,52,1,0,0,0,220,224,7,7,0,0,221,223,7,8,0,0,222,221,1,0,0,0,223,
226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,54,1,0,0,0,226,224,1,0,0,
0,227,228,5,45,0,0,228,56,1,0,0,0,229,230,5,43,0,0,230,58,1,0,0,0,231,232,
5,42,0,0,232,60,1,0,0,0,233,234,5,47,0,0,234,62,1,0,0,0,235,236,5,61,0,0,
236,237,5,61,0,0,237,64,1,0,0,0,238,239,5,33,0,0,239,240,5,61,0,0,240,66,
1,0,0,0,241,242,5,62,0,0,242,68,1,0,0,0,243,244,5,60,0,0,244,70,1,0,0,0,
245,246,5,62,0,0,246,247,5,61,0,0,247,72,1,0,0,0,248,249,5,60,0,0,249,250,
5,61,0,0,250,74,1,0,0,0,251,253,7,9,0,0,252,251,1,0,0,0,253,254,1,0,0,0,
254,252,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,6,37,0,0,257,76,
1,0,0,0,258,259,5,47,0,0,259,260,5,47,0,0,260,264,1,0,0,0,261,263,8,4,0,
0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,267,
1,0,0,0,266,264,1,0,0,0,267,268,6,38,0,0,268,78,1,0,0,0,269,270,5,47,0,0,
270,271,5,42,0,0,271,275,1,0,0,0,272,274,9,0,0,0,273,272,1,0,0,0,274,277,
1,0,0,0,275,276,1,0,0,0,275,273,1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,0,
278,279,5,42,0,0,279,280,5,47,0,0,280,281,1,0,0,0,281,282,6,39,0,0,282,80,
1,0,0,0,20,0,145,149,153,158,164,167,174,176,180,183,195,201,203,213,216,
224,254,264,275,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class NaviLexer extends antlr4.Lexer {

    static grammarFileName = "Navi.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "'='", "'{'", "','", "'}'", "'('", 
                         "')'", "'=>'", "'.'", "'&'", "'|'", "':'", "'::'", 
                         "'as'", "'def'", "'let'", "'match'", "'struct'", 
                         "'enum'", "'_'", null, null, null, null, null, 
                         "'-'", "'+'", "'*'", "'/'", "'=='", "'!='", "'>'", 
                         "'<'", "'>='", "'<='" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, "As", "Def", 
                          "Let", "Match", "Struct", "Enum", "Discard", "IntInterval", 
                          "Interval", "Number", "String", "Identifier", 
                          "OpMinus", "OpPlus", "OpMult", "OpDiv", "OpEqual", 
                          "OpNotEqual", "OpGt", "OpLt", "OpGte", "OpLte", 
                          "Space", "LineComment", "BlockComment" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "As", "Def", "Let", "Match", "Struct", "Enum", "Discard", 
                      "IntInterval", "Interval", "Number", "String", "DIGITS", 
                      "HEX", "Identifier", "OpMinus", "OpPlus", "OpMult", 
                      "OpDiv", "OpEqual", "OpNotEqual", "OpGt", "OpLt", 
                      "OpGte", "OpLte", "Space", "LineComment", "BlockComment" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

NaviLexer.EOF = antlr4.Token.EOF;
NaviLexer.T__0 = 1;
NaviLexer.T__1 = 2;
NaviLexer.T__2 = 3;
NaviLexer.T__3 = 4;
NaviLexer.T__4 = 5;
NaviLexer.T__5 = 6;
NaviLexer.T__6 = 7;
NaviLexer.T__7 = 8;
NaviLexer.T__8 = 9;
NaviLexer.T__9 = 10;
NaviLexer.T__10 = 11;
NaviLexer.T__11 = 12;
NaviLexer.T__12 = 13;
NaviLexer.As = 14;
NaviLexer.Def = 15;
NaviLexer.Let = 16;
NaviLexer.Match = 17;
NaviLexer.Struct = 18;
NaviLexer.Enum = 19;
NaviLexer.Discard = 20;
NaviLexer.IntInterval = 21;
NaviLexer.Interval = 22;
NaviLexer.Number = 23;
NaviLexer.String = 24;
NaviLexer.Identifier = 25;
NaviLexer.OpMinus = 26;
NaviLexer.OpPlus = 27;
NaviLexer.OpMult = 28;
NaviLexer.OpDiv = 29;
NaviLexer.OpEqual = 30;
NaviLexer.OpNotEqual = 31;
NaviLexer.OpGt = 32;
NaviLexer.OpLt = 33;
NaviLexer.OpGte = 34;
NaviLexer.OpLte = 35;
NaviLexer.Space = 36;
NaviLexer.LineComment = 37;
NaviLexer.BlockComment = 38;



