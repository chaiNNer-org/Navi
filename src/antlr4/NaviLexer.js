// Generated from src/antlr4/Navi.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,40,295,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,
8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,158,8,22,1,22,1,22,
3,22,162,8,22,1,22,1,22,3,22,166,8,22,1,22,1,22,1,23,3,23,171,8,23,1,23,
1,23,1,23,1,23,3,23,177,8,23,1,24,3,24,180,8,24,1,24,1,24,1,24,4,24,185,
8,24,11,24,12,24,186,3,24,189,8,24,1,24,1,24,3,24,193,8,24,1,24,3,24,196,
8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,208,8,24,1,25,
1,25,1,25,1,25,5,25,214,8,25,10,25,12,25,217,9,25,1,25,1,25,1,26,1,26,1,
26,5,26,224,8,26,10,26,12,26,227,9,26,3,26,229,8,26,1,27,1,27,1,28,1,28,
5,28,235,8,28,10,28,12,28,238,9,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,
32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,
1,38,1,38,1,39,4,39,265,8,39,11,39,12,39,266,1,39,1,39,1,40,1,40,1,40,1,
40,5,40,275,8,40,10,40,12,40,278,9,40,1,40,1,40,1,41,1,41,1,41,1,41,5,41,
286,8,41,10,41,12,41,289,9,41,1,41,1,41,1,41,1,41,1,41,1,287,0,42,1,1,3,
2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,0,55,0,
57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,
81,39,83,40,1,0,10,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,0,31,
34,34,92,92,2,0,10,10,13,13,1,0,49,57,3,0,48,57,65,70,97,102,2,0,65,90,97,
122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,313,0,1,1,0,0,0,0,
3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,
0,0,0,3,87,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,95,1,0,0,0,
13,97,1,0,0,0,15,99,1,0,0,0,17,102,1,0,0,0,19,104,1,0,0,0,21,106,1,0,0,0,
23,108,1,0,0,0,25,110,1,0,0,0,27,113,1,0,0,0,29,116,1,0,0,0,31,120,1,0,0,
0,33,124,1,0,0,0,35,130,1,0,0,0,37,133,1,0,0,0,39,138,1,0,0,0,41,145,1,0,
0,0,43,150,1,0,0,0,45,152,1,0,0,0,47,170,1,0,0,0,49,207,1,0,0,0,51,209,1,
0,0,0,53,228,1,0,0,0,55,230,1,0,0,0,57,232,1,0,0,0,59,239,1,0,0,0,61,241,
1,0,0,0,63,243,1,0,0,0,65,245,1,0,0,0,67,247,1,0,0,0,69,250,1,0,0,0,71,253,
1,0,0,0,73,255,1,0,0,0,75,257,1,0,0,0,77,260,1,0,0,0,79,264,1,0,0,0,81,270,
1,0,0,0,83,281,1,0,0,0,85,86,5,59,0,0,86,2,1,0,0,0,87,88,5,61,0,0,88,4,1,
0,0,0,89,90,5,123,0,0,90,6,1,0,0,0,91,92,5,44,0,0,92,8,1,0,0,0,93,94,5,125,
0,0,94,10,1,0,0,0,95,96,5,40,0,0,96,12,1,0,0,0,97,98,5,41,0,0,98,14,1,0,
0,0,99,100,5,61,0,0,100,101,5,62,0,0,101,16,1,0,0,0,102,103,5,46,0,0,103,
18,1,0,0,0,104,105,5,38,0,0,105,20,1,0,0,0,106,107,5,124,0,0,107,22,1,0,
0,0,108,109,5,58,0,0,109,24,1,0,0,0,110,111,5,58,0,0,111,112,5,58,0,0,112,
26,1,0,0,0,113,114,5,97,0,0,114,115,5,115,0,0,115,28,1,0,0,0,116,117,5,100,
0,0,117,118,5,101,0,0,118,119,5,102,0,0,119,30,1,0,0,0,120,121,5,108,0,0,
121,122,5,101,0,0,122,123,5,116,0,0,123,32,1,0,0,0,124,125,5,109,0,0,125,
126,5,97,0,0,126,127,5,116,0,0,127,128,5,99,0,0,128,129,5,104,0,0,129,34,
1,0,0,0,130,131,5,105,0,0,131,132,5,102,0,0,132,36,1,0,0,0,133,134,5,101,
0,0,134,135,5,108,0,0,135,136,5,115,0,0,136,137,5,101,0,0,137,38,1,0,0,0,
138,139,5,115,0,0,139,140,5,116,0,0,140,141,5,114,0,0,141,142,5,117,0,0,
142,143,5,99,0,0,143,144,5,116,0,0,144,40,1,0,0,0,145,146,5,101,0,0,146,
147,5,110,0,0,147,148,5,117,0,0,148,149,5,109,0,0,149,42,1,0,0,0,150,151,
5,95,0,0,151,44,1,0,0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,155,5,116,
0,0,155,157,1,0,0,0,156,158,3,79,39,0,157,156,1,0,0,0,157,158,1,0,0,0,158,
159,1,0,0,0,159,161,5,40,0,0,160,162,3,79,39,0,161,160,1,0,0,0,161,162,1,
0,0,0,162,163,1,0,0,0,163,165,3,47,23,0,164,166,3,79,39,0,165,164,1,0,0,
0,165,166,1,0,0,0,166,167,1,0,0,0,167,168,5,41,0,0,168,46,1,0,0,0,169,171,
3,49,24,0,170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,173,5,46,0,
0,173,174,5,46,0,0,174,176,1,0,0,0,175,177,3,49,24,0,176,175,1,0,0,0,176,
177,1,0,0,0,177,48,1,0,0,0,178,180,5,45,0,0,179,178,1,0,0,0,179,180,1,0,
0,0,180,181,1,0,0,0,181,188,3,53,26,0,182,184,5,46,0,0,183,185,7,0,0,0,184,
183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,0,
0,0,188,182,1,0,0,0,188,189,1,0,0,0,189,195,1,0,0,0,190,192,7,1,0,0,191,
193,7,2,0,0,192,191,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,196,3,53,
26,0,195,190,1,0,0,0,195,196,1,0,0,0,196,208,1,0,0,0,197,198,5,105,0,0,198,
199,5,110,0,0,199,208,5,102,0,0,200,201,5,45,0,0,201,202,5,105,0,0,202,203,
5,110,0,0,203,208,5,102,0,0,204,205,5,110,0,0,205,206,5,97,0,0,206,208,5,
110,0,0,207,179,1,0,0,0,207,197,1,0,0,0,207,200,1,0,0,0,207,204,1,0,0,0,
208,50,1,0,0,0,209,215,5,34,0,0,210,214,8,3,0,0,211,212,5,92,0,0,212,214,
8,4,0,0,213,210,1,0,0,0,213,211,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,
215,216,1,0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,219,5,34,0,0,219,52,
1,0,0,0,220,229,5,48,0,0,221,225,7,5,0,0,222,224,7,0,0,0,223,222,1,0,0,0,
224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,229,1,0,0,0,227,225,
1,0,0,0,228,220,1,0,0,0,228,221,1,0,0,0,229,54,1,0,0,0,230,231,7,6,0,0,231,
56,1,0,0,0,232,236,7,7,0,0,233,235,7,8,0,0,234,233,1,0,0,0,235,238,1,0,0,
0,236,234,1,0,0,0,236,237,1,0,0,0,237,58,1,0,0,0,238,236,1,0,0,0,239,240,
5,45,0,0,240,60,1,0,0,0,241,242,5,43,0,0,242,62,1,0,0,0,243,244,5,42,0,0,
244,64,1,0,0,0,245,246,5,47,0,0,246,66,1,0,0,0,247,248,5,61,0,0,248,249,
5,61,0,0,249,68,1,0,0,0,250,251,5,33,0,0,251,252,5,61,0,0,252,70,1,0,0,0,
253,254,5,62,0,0,254,72,1,0,0,0,255,256,5,60,0,0,256,74,1,0,0,0,257,258,
5,62,0,0,258,259,5,61,0,0,259,76,1,0,0,0,260,261,5,60,0,0,261,262,5,61,0,
0,262,78,1,0,0,0,263,265,7,9,0,0,264,263,1,0,0,0,265,266,1,0,0,0,266,264,
1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,6,39,0,0,269,80,1,0,0,0,
270,271,5,47,0,0,271,272,5,47,0,0,272,276,1,0,0,0,273,275,8,4,0,0,274,273,
1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,
278,276,1,0,0,0,279,280,6,40,0,0,280,82,1,0,0,0,281,282,5,47,0,0,282,283,
5,42,0,0,283,287,1,0,0,0,284,286,9,0,0,0,285,284,1,0,0,0,286,289,1,0,0,0,
287,288,1,0,0,0,287,285,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,
5,42,0,0,291,292,5,47,0,0,292,293,1,0,0,0,293,294,6,41,0,0,294,84,1,0,0,
0,20,0,157,161,165,170,176,179,186,188,192,195,207,213,215,225,228,236,266,
276,287,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class NaviLexer extends antlr4.Lexer {

    static grammarFileName = "Navi.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "'='", "'{'", "','", "'}'", "'('", 
                         "')'", "'=>'", "'.'", "'&'", "'|'", "':'", "'::'", 
                         "'as'", "'def'", "'let'", "'match'", "'if'", "'else'", 
                         "'struct'", "'enum'", "'_'", null, null, null, 
                         null, null, "'-'", "'+'", "'*'", "'/'", "'=='", 
                         "'!='", "'>'", "'<'", "'>='", "'<='" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, "As", "Def", 
                          "Let", "Match", "If", "Else", "Struct", "Enum", 
                          "Discard", "IntInterval", "Interval", "Number", 
                          "String", "Identifier", "OpMinus", "OpPlus", "OpMult", 
                          "OpDiv", "OpEqual", "OpNotEqual", "OpGt", "OpLt", 
                          "OpGte", "OpLte", "Space", "LineComment", "BlockComment" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "As", "Def", "Let", "Match", "If", "Else", "Struct", 
                      "Enum", "Discard", "IntInterval", "Interval", "Number", 
                      "String", "DIGITS", "HEX", "Identifier", "OpMinus", 
                      "OpPlus", "OpMult", "OpDiv", "OpEqual", "OpNotEqual", 
                      "OpGt", "OpLt", "OpGte", "OpLte", "Space", "LineComment", 
                      "BlockComment" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

NaviLexer.EOF = antlr4.Token.EOF;
NaviLexer.T__0 = 1;
NaviLexer.T__1 = 2;
NaviLexer.T__2 = 3;
NaviLexer.T__3 = 4;
NaviLexer.T__4 = 5;
NaviLexer.T__5 = 6;
NaviLexer.T__6 = 7;
NaviLexer.T__7 = 8;
NaviLexer.T__8 = 9;
NaviLexer.T__9 = 10;
NaviLexer.T__10 = 11;
NaviLexer.T__11 = 12;
NaviLexer.T__12 = 13;
NaviLexer.As = 14;
NaviLexer.Def = 15;
NaviLexer.Let = 16;
NaviLexer.Match = 17;
NaviLexer.If = 18;
NaviLexer.Else = 19;
NaviLexer.Struct = 20;
NaviLexer.Enum = 21;
NaviLexer.Discard = 22;
NaviLexer.IntInterval = 23;
NaviLexer.Interval = 24;
NaviLexer.Number = 25;
NaviLexer.String = 26;
NaviLexer.Identifier = 27;
NaviLexer.OpMinus = 28;
NaviLexer.OpPlus = 29;
NaviLexer.OpMult = 30;
NaviLexer.OpDiv = 31;
NaviLexer.OpEqual = 32;
NaviLexer.OpNotEqual = 33;
NaviLexer.OpGt = 34;
NaviLexer.OpLt = 35;
NaviLexer.OpGte = 36;
NaviLexer.OpLte = 37;
NaviLexer.Space = 38;
NaviLexer.LineComment = 39;
NaviLexer.BlockComment = 40;



