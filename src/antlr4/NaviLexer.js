// Generated from src/antlr4/Navi.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,48,387,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,
1,25,1,25,1,25,1,25,3,25,195,8,25,1,25,1,25,3,25,199,8,25,1,25,1,25,3,25,
203,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,215,8,26,
1,26,1,26,3,26,219,8,26,1,26,1,26,3,26,223,8,26,1,26,1,26,1,27,3,27,228,
8,27,1,27,1,27,1,27,1,27,3,27,234,8,27,1,28,3,28,237,8,28,1,28,1,28,1,28,
1,28,1,28,3,28,244,8,28,1,29,3,29,247,8,29,1,29,1,29,1,29,1,29,1,29,3,29,
254,8,29,1,30,3,30,257,8,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,265,8,30,
1,31,3,31,268,8,31,1,31,1,31,1,31,4,31,273,8,31,11,31,12,31,274,3,31,277,
8,31,1,31,1,31,3,31,281,8,31,1,31,3,31,284,8,31,1,31,1,31,1,31,1,31,1,31,
1,31,1,31,1,31,1,31,1,31,3,31,296,8,31,1,32,1,32,1,32,1,32,5,32,302,8,32,
10,32,12,32,305,9,32,1,32,1,32,1,33,1,33,1,33,5,33,312,8,33,10,33,12,33,
315,9,33,3,33,317,8,33,1,34,1,34,1,35,1,35,5,35,323,8,35,10,35,12,35,326,
9,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,
41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
1,47,4,47,357,8,47,11,47,12,47,358,1,47,1,47,1,48,1,48,1,48,1,48,5,48,367,
8,48,10,48,12,48,370,9,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,378,8,49,10,
49,12,49,381,9,49,1,49,1,49,1,49,1,49,1,49,1,379,0,50,1,1,3,2,5,3,7,4,9,
5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
30,61,31,63,32,65,33,67,0,69,0,71,34,73,35,75,36,77,37,79,38,81,39,83,40,
85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,1,0,10,1,0,48,57,2,0,69,
69,101,101,2,0,43,43,45,45,3,0,0,31,34,34,92,92,2,0,10,10,13,13,1,0,49,57,
3,0,48,57,65,70,97,102,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,
9,10,13,13,32,32,414,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,
3,103,1,0,0,0,5,105,1,0,0,0,7,107,1,0,0,0,9,109,1,0,0,0,11,111,1,0,0,0,13,
113,1,0,0,0,15,115,1,0,0,0,17,118,1,0,0,0,19,120,1,0,0,0,21,122,1,0,0,0,
23,124,1,0,0,0,25,126,1,0,0,0,27,129,1,0,0,0,29,132,1,0,0,0,31,136,1,0,0,
0,33,140,1,0,0,0,35,146,1,0,0,0,37,149,1,0,0,0,39,154,1,0,0,0,41,161,1,0,
0,0,43,166,1,0,0,0,45,176,1,0,0,0,47,181,1,0,0,0,49,187,1,0,0,0,51,189,1,
0,0,0,53,206,1,0,0,0,55,227,1,0,0,0,57,236,1,0,0,0,59,246,1,0,0,0,61,256,
1,0,0,0,63,295,1,0,0,0,65,297,1,0,0,0,67,316,1,0,0,0,69,318,1,0,0,0,71,320,
1,0,0,0,73,327,1,0,0,0,75,329,1,0,0,0,77,331,1,0,0,0,79,333,1,0,0,0,81,335,
1,0,0,0,83,338,1,0,0,0,85,341,1,0,0,0,87,343,1,0,0,0,89,345,1,0,0,0,91,348,
1,0,0,0,93,351,1,0,0,0,95,356,1,0,0,0,97,362,1,0,0,0,99,373,1,0,0,0,101,
102,5,59,0,0,102,2,1,0,0,0,103,104,5,61,0,0,104,4,1,0,0,0,105,106,5,123,
0,0,106,6,1,0,0,0,107,108,5,44,0,0,108,8,1,0,0,0,109,110,5,125,0,0,110,10,
1,0,0,0,111,112,5,40,0,0,112,12,1,0,0,0,113,114,5,41,0,0,114,14,1,0,0,0,
115,116,5,61,0,0,116,117,5,62,0,0,117,16,1,0,0,0,118,119,5,46,0,0,119,18,
1,0,0,0,120,121,5,38,0,0,121,20,1,0,0,0,122,123,5,124,0,0,123,22,1,0,0,0,
124,125,5,58,0,0,125,24,1,0,0,0,126,127,5,58,0,0,127,128,5,58,0,0,128,26,
1,0,0,0,129,130,5,97,0,0,130,131,5,115,0,0,131,28,1,0,0,0,132,133,5,100,
0,0,133,134,5,101,0,0,134,135,5,102,0,0,135,30,1,0,0,0,136,137,5,108,0,0,
137,138,5,101,0,0,138,139,5,116,0,0,139,32,1,0,0,0,140,141,5,109,0,0,141,
142,5,97,0,0,142,143,5,116,0,0,143,144,5,99,0,0,144,145,5,104,0,0,145,34,
1,0,0,0,146,147,5,105,0,0,147,148,5,102,0,0,148,36,1,0,0,0,149,150,5,101,
0,0,150,151,5,108,0,0,151,152,5,115,0,0,152,153,5,101,0,0,153,38,1,0,0,0,
154,155,5,115,0,0,155,156,5,116,0,0,156,157,5,114,0,0,157,158,5,117,0,0,
158,159,5,99,0,0,159,160,5,116,0,0,160,40,1,0,0,0,161,162,5,101,0,0,162,
163,5,110,0,0,163,164,5,117,0,0,164,165,5,109,0,0,165,42,1,0,0,0,166,167,
5,105,0,0,167,168,5,110,0,0,168,169,5,116,0,0,169,170,5,114,0,0,170,171,
5,105,0,0,171,172,5,110,0,0,172,173,5,115,0,0,173,174,5,105,0,0,174,175,
5,99,0,0,175,44,1,0,0,0,176,177,5,115,0,0,177,178,5,101,0,0,178,179,5,108,
0,0,179,180,5,102,0,0,180,46,1,0,0,0,181,182,5,116,0,0,182,183,5,114,0,0,
183,184,5,97,0,0,184,185,5,105,0,0,185,186,5,116,0,0,186,48,1,0,0,0,187,
188,5,95,0,0,188,50,1,0,0,0,189,190,5,105,0,0,190,191,5,110,0,0,191,192,
5,116,0,0,192,194,1,0,0,0,193,195,3,95,47,0,194,193,1,0,0,0,194,195,1,0,
0,0,195,196,1,0,0,0,196,198,5,40,0,0,197,199,3,95,47,0,198,197,1,0,0,0,198,
199,1,0,0,0,199,200,1,0,0,0,200,202,3,55,27,0,201,203,3,95,47,0,202,201,
1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,205,5,41,0,0,205,52,1,0,0,0,
206,207,5,110,0,0,207,208,5,111,0,0,208,209,5,110,0,0,209,210,5,73,0,0,210,
211,5,110,0,0,211,212,5,116,0,0,212,214,1,0,0,0,213,215,3,95,47,0,214,213,
1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,218,5,40,0,0,217,219,3,95,47,
0,218,217,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,222,3,55,27,0,221,
223,3,95,47,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,225,5,
41,0,0,225,54,1,0,0,0,226,228,3,63,31,0,227,226,1,0,0,0,227,228,1,0,0,0,
228,229,1,0,0,0,229,230,5,46,0,0,230,231,5,46,0,0,231,233,1,0,0,0,232,234,
3,63,31,0,233,232,1,0,0,0,233,234,1,0,0,0,234,56,1,0,0,0,235,237,3,63,31,
0,236,235,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,239,5,33,0,0,239,240,
5,46,0,0,240,241,5,46,0,0,241,243,1,0,0,0,242,244,3,63,31,0,243,242,1,0,
0,0,243,244,1,0,0,0,244,58,1,0,0,0,245,247,3,63,31,0,246,245,1,0,0,0,246,
247,1,0,0,0,247,248,1,0,0,0,248,249,5,46,0,0,249,250,5,46,0,0,250,251,5,
33,0,0,251,253,1,0,0,0,252,254,3,63,31,0,253,252,1,0,0,0,253,254,1,0,0,0,
254,60,1,0,0,0,255,257,3,63,31,0,256,255,1,0,0,0,256,257,1,0,0,0,257,258,
1,0,0,0,258,259,5,33,0,0,259,260,5,46,0,0,260,261,5,46,0,0,261,262,5,33,
0,0,262,264,1,0,0,0,263,265,3,63,31,0,264,263,1,0,0,0,264,265,1,0,0,0,265,
62,1,0,0,0,266,268,5,45,0,0,267,266,1,0,0,0,267,268,1,0,0,0,268,269,1,0,
0,0,269,276,3,67,33,0,270,272,5,46,0,0,271,273,7,0,0,0,272,271,1,0,0,0,273,
274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,270,1,0,
0,0,276,277,1,0,0,0,277,283,1,0,0,0,278,280,7,1,0,0,279,281,7,2,0,0,280,
279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,284,3,67,33,0,283,278,1,
0,0,0,283,284,1,0,0,0,284,296,1,0,0,0,285,286,5,105,0,0,286,287,5,110,0,
0,287,296,5,102,0,0,288,289,5,45,0,0,289,290,5,105,0,0,290,291,5,110,0,0,
291,296,5,102,0,0,292,293,5,110,0,0,293,294,5,97,0,0,294,296,5,110,0,0,295,
267,1,0,0,0,295,285,1,0,0,0,295,288,1,0,0,0,295,292,1,0,0,0,296,64,1,0,0,
0,297,303,5,34,0,0,298,302,8,3,0,0,299,300,5,92,0,0,300,302,8,4,0,0,301,
298,1,0,0,0,301,299,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,
0,0,304,306,1,0,0,0,305,303,1,0,0,0,306,307,5,34,0,0,307,66,1,0,0,0,308,
317,5,48,0,0,309,313,7,5,0,0,310,312,7,0,0,0,311,310,1,0,0,0,312,315,1,0,
0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,316,
308,1,0,0,0,316,309,1,0,0,0,317,68,1,0,0,0,318,319,7,6,0,0,319,70,1,0,0,
0,320,324,7,7,0,0,321,323,7,8,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,
1,0,0,0,324,325,1,0,0,0,325,72,1,0,0,0,326,324,1,0,0,0,327,328,5,45,0,0,
328,74,1,0,0,0,329,330,5,43,0,0,330,76,1,0,0,0,331,332,5,42,0,0,332,78,1,
0,0,0,333,334,5,47,0,0,334,80,1,0,0,0,335,336,5,61,0,0,336,337,5,61,0,0,
337,82,1,0,0,0,338,339,5,33,0,0,339,340,5,61,0,0,340,84,1,0,0,0,341,342,
5,62,0,0,342,86,1,0,0,0,343,344,5,60,0,0,344,88,1,0,0,0,345,346,5,62,0,0,
346,347,5,61,0,0,347,90,1,0,0,0,348,349,5,60,0,0,349,350,5,61,0,0,350,92,
1,0,0,0,351,352,5,46,0,0,352,353,5,46,0,0,353,354,5,46,0,0,354,94,1,0,0,
0,355,357,7,9,0,0,356,355,1,0,0,0,357,358,1,0,0,0,358,356,1,0,0,0,358,359,
1,0,0,0,359,360,1,0,0,0,360,361,6,47,0,0,361,96,1,0,0,0,362,363,5,47,0,0,
363,364,5,47,0,0,364,368,1,0,0,0,365,367,8,4,0,0,366,365,1,0,0,0,367,370,
1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,
371,372,6,48,0,0,372,98,1,0,0,0,373,374,5,47,0,0,374,375,5,42,0,0,375,379,
1,0,0,0,376,378,9,0,0,0,377,376,1,0,0,0,378,381,1,0,0,0,379,380,1,0,0,0,
379,377,1,0,0,0,380,382,1,0,0,0,381,379,1,0,0,0,382,383,5,42,0,0,383,384,
5,47,0,0,384,385,1,0,0,0,385,386,6,49,0,0,386,100,1,0,0,0,29,0,194,198,202,
214,218,222,227,233,236,243,246,253,256,264,267,274,276,280,283,295,301,
303,313,316,324,358,368,379,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class NaviLexer extends antlr4.Lexer {

    static grammarFileName = "Navi.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "'='", "'{'", "','", "'}'", "'('", 
                         "')'", "'=>'", "'.'", "'&'", "'|'", "':'", "'::'", 
                         "'as'", "'def'", "'let'", "'match'", "'if'", "'else'", 
                         "'struct'", "'enum'", "'intrinsic'", "'self'", 
                         "'trait'", "'_'", null, null, null, null, null, 
                         null, null, null, null, "'-'", "'+'", "'*'", "'/'", 
                         "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'...'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, "As", "Def", 
                          "Let", "Match", "If", "Else", "Struct", "Enum", 
                          "Intrinsic", "Self", "Trait", "Discard", "IntInterval", 
                          "NonIntInterval", "IntervalInclusive", "IntervalMinExclusive", 
                          "IntervalMaxExclusive", "IntervalExclusive", "Number", 
                          "String", "Identifier", "OpMinus", "OpPlus", "OpMult", 
                          "OpDiv", "OpEqual", "OpNotEqual", "OpGt", "OpLt", 
                          "OpGte", "OpLte", "OpSpread", "Space", "LineComment", 
                          "BlockComment" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "As", "Def", "Let", "Match", "If", "Else", "Struct", 
                      "Enum", "Intrinsic", "Self", "Trait", "Discard", "IntInterval", 
                      "NonIntInterval", "IntervalInclusive", "IntervalMinExclusive", 
                      "IntervalMaxExclusive", "IntervalExclusive", "Number", 
                      "String", "DIGITS", "HEX", "Identifier", "OpMinus", 
                      "OpPlus", "OpMult", "OpDiv", "OpEqual", "OpNotEqual", 
                      "OpGt", "OpLt", "OpGte", "OpLte", "OpSpread", "Space", 
                      "LineComment", "BlockComment" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

NaviLexer.EOF = antlr4.Token.EOF;
NaviLexer.T__0 = 1;
NaviLexer.T__1 = 2;
NaviLexer.T__2 = 3;
NaviLexer.T__3 = 4;
NaviLexer.T__4 = 5;
NaviLexer.T__5 = 6;
NaviLexer.T__6 = 7;
NaviLexer.T__7 = 8;
NaviLexer.T__8 = 9;
NaviLexer.T__9 = 10;
NaviLexer.T__10 = 11;
NaviLexer.T__11 = 12;
NaviLexer.T__12 = 13;
NaviLexer.As = 14;
NaviLexer.Def = 15;
NaviLexer.Let = 16;
NaviLexer.Match = 17;
NaviLexer.If = 18;
NaviLexer.Else = 19;
NaviLexer.Struct = 20;
NaviLexer.Enum = 21;
NaviLexer.Intrinsic = 22;
NaviLexer.Self = 23;
NaviLexer.Trait = 24;
NaviLexer.Discard = 25;
NaviLexer.IntInterval = 26;
NaviLexer.NonIntInterval = 27;
NaviLexer.IntervalInclusive = 28;
NaviLexer.IntervalMinExclusive = 29;
NaviLexer.IntervalMaxExclusive = 30;
NaviLexer.IntervalExclusive = 31;
NaviLexer.Number = 32;
NaviLexer.String = 33;
NaviLexer.Identifier = 34;
NaviLexer.OpMinus = 35;
NaviLexer.OpPlus = 36;
NaviLexer.OpMult = 37;
NaviLexer.OpDiv = 38;
NaviLexer.OpEqual = 39;
NaviLexer.OpNotEqual = 40;
NaviLexer.OpGt = 41;
NaviLexer.OpLt = 42;
NaviLexer.OpGte = 43;
NaviLexer.OpLte = 44;
NaviLexer.OpSpread = 45;
NaviLexer.Space = 46;
NaviLexer.LineComment = 47;
NaviLexer.BlockComment = 48;



