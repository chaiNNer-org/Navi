// Generated from src/antlr4/Navi.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,51,404,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,
21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,
27,1,27,1,28,1,28,1,28,1,28,1,28,3,28,212,8,28,1,28,1,28,3,28,216,8,28,1,
28,1,28,3,28,220,8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
3,29,232,8,29,1,29,1,29,3,29,236,8,29,1,29,1,29,3,29,240,8,29,1,29,1,29,
1,30,3,30,245,8,30,1,30,1,30,1,30,1,30,3,30,251,8,30,1,31,3,31,254,8,31,
1,31,1,31,1,31,1,31,1,31,3,31,261,8,31,1,32,3,32,264,8,32,1,32,1,32,1,32,
1,32,1,32,3,32,271,8,32,1,33,3,33,274,8,33,1,33,1,33,1,33,1,33,1,33,1,33,
3,33,282,8,33,1,34,3,34,285,8,34,1,34,1,34,1,34,4,34,290,8,34,11,34,12,34,
291,3,34,294,8,34,1,34,1,34,3,34,298,8,34,1,34,3,34,301,8,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,313,8,34,1,35,1,35,1,35,1,35,
5,35,319,8,35,10,35,12,35,322,9,35,1,35,1,35,1,36,1,36,1,36,5,36,329,8,36,
10,36,12,36,332,9,36,3,36,334,8,36,1,37,1,37,1,38,1,38,5,38,340,8,38,10,
38,12,38,343,9,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,
1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,
49,1,49,1,49,1,50,4,50,374,8,50,11,50,12,50,375,1,50,1,50,1,51,1,51,1,51,
1,51,5,51,384,8,51,10,51,12,51,387,9,51,1,51,1,51,1,52,1,52,1,52,1,52,5,
52,395,8,52,10,52,12,52,398,9,52,1,52,1,52,1,52,1,52,1,52,1,396,0,53,1,1,
3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,0,75,0,77,37,79,
38,81,39,83,40,85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,101,49,103,
50,105,51,1,0,10,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,0,31,34,
34,92,92,2,0,10,10,13,13,1,0,49,57,3,0,48,57,65,70,97,102,2,0,65,90,97,122,
4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,431,0,1,1,0,0,0,0,3,1,
0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,
0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,1,107,1,0,0,
0,3,109,1,0,0,0,5,111,1,0,0,0,7,113,1,0,0,0,9,115,1,0,0,0,11,117,1,0,0,0,
13,119,1,0,0,0,15,121,1,0,0,0,17,124,1,0,0,0,19,126,1,0,0,0,21,128,1,0,0,
0,23,130,1,0,0,0,25,132,1,0,0,0,27,135,1,0,0,0,29,139,1,0,0,0,31,142,1,0,
0,0,33,146,1,0,0,0,35,151,1,0,0,0,37,156,1,0,0,0,39,159,1,0,0,0,41,169,1,
0,0,0,43,173,1,0,0,0,45,179,1,0,0,0,47,183,1,0,0,0,49,186,1,0,0,0,51,193,
1,0,0,0,53,198,1,0,0,0,55,204,1,0,0,0,57,206,1,0,0,0,59,223,1,0,0,0,61,244,
1,0,0,0,63,253,1,0,0,0,65,263,1,0,0,0,67,273,1,0,0,0,69,312,1,0,0,0,71,314,
1,0,0,0,73,333,1,0,0,0,75,335,1,0,0,0,77,337,1,0,0,0,79,344,1,0,0,0,81,346,
1,0,0,0,83,348,1,0,0,0,85,350,1,0,0,0,87,352,1,0,0,0,89,355,1,0,0,0,91,358,
1,0,0,0,93,360,1,0,0,0,95,362,1,0,0,0,97,365,1,0,0,0,99,368,1,0,0,0,101,
373,1,0,0,0,103,379,1,0,0,0,105,390,1,0,0,0,107,108,5,59,0,0,108,2,1,0,0,
0,109,110,5,61,0,0,110,4,1,0,0,0,111,112,5,123,0,0,112,6,1,0,0,0,113,114,
5,44,0,0,114,8,1,0,0,0,115,116,5,125,0,0,116,10,1,0,0,0,117,118,5,40,0,0,
118,12,1,0,0,0,119,120,5,41,0,0,120,14,1,0,0,0,121,122,5,61,0,0,122,123,
5,62,0,0,123,16,1,0,0,0,124,125,5,46,0,0,125,18,1,0,0,0,126,127,5,38,0,0,
127,20,1,0,0,0,128,129,5,124,0,0,129,22,1,0,0,0,130,131,5,58,0,0,131,24,
1,0,0,0,132,133,5,58,0,0,133,134,5,58,0,0,134,26,1,0,0,0,135,136,5,97,0,
0,136,137,5,110,0,0,137,138,5,100,0,0,138,28,1,0,0,0,139,140,5,97,0,0,140,
141,5,115,0,0,141,30,1,0,0,0,142,143,5,100,0,0,143,144,5,101,0,0,144,145,
5,102,0,0,145,32,1,0,0,0,146,147,5,101,0,0,147,148,5,108,0,0,148,149,5,115,
0,0,149,150,5,101,0,0,150,34,1,0,0,0,151,152,5,101,0,0,152,153,5,110,0,0,
153,154,5,117,0,0,154,155,5,109,0,0,155,36,1,0,0,0,156,157,5,105,0,0,157,
158,5,102,0,0,158,38,1,0,0,0,159,160,5,105,0,0,160,161,5,110,0,0,161,162,
5,116,0,0,162,163,5,114,0,0,163,164,5,105,0,0,164,165,5,110,0,0,165,166,
5,115,0,0,166,167,5,105,0,0,167,168,5,99,0,0,168,40,1,0,0,0,169,170,5,108,
0,0,170,171,5,101,0,0,171,172,5,116,0,0,172,42,1,0,0,0,173,174,5,109,0,0,
174,175,5,97,0,0,175,176,5,116,0,0,176,177,5,99,0,0,177,178,5,104,0,0,178,
44,1,0,0,0,179,180,5,110,0,0,180,181,5,111,0,0,181,182,5,116,0,0,182,46,
1,0,0,0,183,184,5,111,0,0,184,185,5,114,0,0,185,48,1,0,0,0,186,187,5,115,
0,0,187,188,5,116,0,0,188,189,5,114,0,0,189,190,5,117,0,0,190,191,5,99,0,
0,191,192,5,116,0,0,192,50,1,0,0,0,193,194,5,115,0,0,194,195,5,101,0,0,195,
196,5,108,0,0,196,197,5,102,0,0,197,52,1,0,0,0,198,199,5,116,0,0,199,200,
5,114,0,0,200,201,5,97,0,0,201,202,5,105,0,0,202,203,5,116,0,0,203,54,1,
0,0,0,204,205,5,95,0,0,205,56,1,0,0,0,206,207,5,105,0,0,207,208,5,110,0,
0,208,209,5,116,0,0,209,211,1,0,0,0,210,212,3,101,50,0,211,210,1,0,0,0,211,
212,1,0,0,0,212,213,1,0,0,0,213,215,5,40,0,0,214,216,3,101,50,0,215,214,
1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,219,3,61,30,0,218,220,3,101,
50,0,219,218,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,5,41,0,0,222,
58,1,0,0,0,223,224,5,110,0,0,224,225,5,111,0,0,225,226,5,110,0,0,226,227,
5,73,0,0,227,228,5,110,0,0,228,229,5,116,0,0,229,231,1,0,0,0,230,232,3,101,
50,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,235,5,40,0,0,234,
236,3,101,50,0,235,234,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,239,3,
61,30,0,238,240,3,101,50,0,239,238,1,0,0,0,239,240,1,0,0,0,240,241,1,0,0,
0,241,242,5,41,0,0,242,60,1,0,0,0,243,245,3,69,34,0,244,243,1,0,0,0,244,
245,1,0,0,0,245,246,1,0,0,0,246,247,5,46,0,0,247,248,5,46,0,0,248,250,1,
0,0,0,249,251,3,69,34,0,250,249,1,0,0,0,250,251,1,0,0,0,251,62,1,0,0,0,252,
254,3,69,34,0,253,252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,5,
33,0,0,256,257,5,46,0,0,257,258,5,46,0,0,258,260,1,0,0,0,259,261,3,69,34,
0,260,259,1,0,0,0,260,261,1,0,0,0,261,64,1,0,0,0,262,264,3,69,34,0,263,262,
1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,266,5,46,0,0,266,267,5,46,0,
0,267,268,5,33,0,0,268,270,1,0,0,0,269,271,3,69,34,0,270,269,1,0,0,0,270,
271,1,0,0,0,271,66,1,0,0,0,272,274,3,69,34,0,273,272,1,0,0,0,273,274,1,0,
0,0,274,275,1,0,0,0,275,276,5,33,0,0,276,277,5,46,0,0,277,278,5,46,0,0,278,
279,5,33,0,0,279,281,1,0,0,0,280,282,3,69,34,0,281,280,1,0,0,0,281,282,1,
0,0,0,282,68,1,0,0,0,283,285,5,45,0,0,284,283,1,0,0,0,284,285,1,0,0,0,285,
286,1,0,0,0,286,293,3,73,36,0,287,289,5,46,0,0,288,290,7,0,0,0,289,288,1,
0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,
287,1,0,0,0,293,294,1,0,0,0,294,300,1,0,0,0,295,297,7,1,0,0,296,298,7,2,
0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,301,3,73,36,0,300,
295,1,0,0,0,300,301,1,0,0,0,301,313,1,0,0,0,302,303,5,105,0,0,303,304,5,
110,0,0,304,313,5,102,0,0,305,306,5,45,0,0,306,307,5,105,0,0,307,308,5,110,
0,0,308,313,5,102,0,0,309,310,5,110,0,0,310,311,5,97,0,0,311,313,5,110,0,
0,312,284,1,0,0,0,312,302,1,0,0,0,312,305,1,0,0,0,312,309,1,0,0,0,313,70,
1,0,0,0,314,320,5,34,0,0,315,319,8,3,0,0,316,317,5,92,0,0,317,319,8,4,0,
0,318,315,1,0,0,0,318,316,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,
1,0,0,0,321,323,1,0,0,0,322,320,1,0,0,0,323,324,5,34,0,0,324,72,1,0,0,0,
325,334,5,48,0,0,326,330,7,5,0,0,327,329,7,0,0,0,328,327,1,0,0,0,329,332,
1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,
333,325,1,0,0,0,333,326,1,0,0,0,334,74,1,0,0,0,335,336,7,6,0,0,336,76,1,
0,0,0,337,341,7,7,0,0,338,340,7,8,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,
339,1,0,0,0,341,342,1,0,0,0,342,78,1,0,0,0,343,341,1,0,0,0,344,345,5,45,
0,0,345,80,1,0,0,0,346,347,5,43,0,0,347,82,1,0,0,0,348,349,5,42,0,0,349,
84,1,0,0,0,350,351,5,47,0,0,351,86,1,0,0,0,352,353,5,61,0,0,353,354,5,61,
0,0,354,88,1,0,0,0,355,356,5,33,0,0,356,357,5,61,0,0,357,90,1,0,0,0,358,
359,5,62,0,0,359,92,1,0,0,0,360,361,5,60,0,0,361,94,1,0,0,0,362,363,5,62,
0,0,363,364,5,61,0,0,364,96,1,0,0,0,365,366,5,60,0,0,366,367,5,61,0,0,367,
98,1,0,0,0,368,369,5,46,0,0,369,370,5,46,0,0,370,371,5,46,0,0,371,100,1,
0,0,0,372,374,7,9,0,0,373,372,1,0,0,0,374,375,1,0,0,0,375,373,1,0,0,0,375,
376,1,0,0,0,376,377,1,0,0,0,377,378,6,50,0,0,378,102,1,0,0,0,379,380,5,47,
0,0,380,381,5,47,0,0,381,385,1,0,0,0,382,384,8,4,0,0,383,382,1,0,0,0,384,
387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,385,1,0,
0,0,388,389,6,51,0,0,389,104,1,0,0,0,390,391,5,47,0,0,391,392,5,42,0,0,392,
396,1,0,0,0,393,395,9,0,0,0,394,393,1,0,0,0,395,398,1,0,0,0,396,397,1,0,
0,0,396,394,1,0,0,0,397,399,1,0,0,0,398,396,1,0,0,0,399,400,5,42,0,0,400,
401,5,47,0,0,401,402,1,0,0,0,402,403,6,52,0,0,403,106,1,0,0,0,29,0,211,215,
219,231,235,239,244,250,253,260,263,270,273,281,284,291,293,297,300,312,
318,320,330,333,341,375,385,396,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class NaviLexer extends antlr4.Lexer {

    static grammarFileName = "Navi.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "'='", "'{'", "','", "'}'", "'('", 
                         "')'", "'=>'", "'.'", "'&'", "'|'", "':'", "'::'", 
                         "'and'", "'as'", "'def'", "'else'", "'enum'", "'if'", 
                         "'intrinsic'", "'let'", "'match'", "'not'", "'or'", 
                         "'struct'", "'self'", "'trait'", "'_'", null, null, 
                         null, null, null, null, null, null, null, "'-'", 
                         "'+'", "'*'", "'/'", "'=='", "'!='", "'>'", "'<'", 
                         "'>='", "'<='", "'...'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, "And", "As", 
                          "Def", "Else", "Enum", "If", "Intrinsic", "Let", 
                          "Match", "Not", "Or", "Struct", "Self", "Trait", 
                          "Discard", "IntInterval", "NonIntInterval", "IntervalInclusive", 
                          "IntervalMinExclusive", "IntervalMaxExclusive", 
                          "IntervalExclusive", "Number", "String", "Identifier", 
                          "OpMinus", "OpPlus", "OpMult", "OpDiv", "OpEqual", 
                          "OpNotEqual", "OpGt", "OpLt", "OpGte", "OpLte", 
                          "OpSpread", "Space", "LineComment", "BlockComment" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "And", "As", "Def", "Else", "Enum", "If", "Intrinsic", 
                      "Let", "Match", "Not", "Or", "Struct", "Self", "Trait", 
                      "Discard", "IntInterval", "NonIntInterval", "IntervalInclusive", 
                      "IntervalMinExclusive", "IntervalMaxExclusive", "IntervalExclusive", 
                      "Number", "String", "DIGITS", "HEX", "Identifier", 
                      "OpMinus", "OpPlus", "OpMult", "OpDiv", "OpEqual", 
                      "OpNotEqual", "OpGt", "OpLt", "OpGte", "OpLte", "OpSpread", 
                      "Space", "LineComment", "BlockComment" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

NaviLexer.EOF = antlr4.Token.EOF;
NaviLexer.T__0 = 1;
NaviLexer.T__1 = 2;
NaviLexer.T__2 = 3;
NaviLexer.T__3 = 4;
NaviLexer.T__4 = 5;
NaviLexer.T__5 = 6;
NaviLexer.T__6 = 7;
NaviLexer.T__7 = 8;
NaviLexer.T__8 = 9;
NaviLexer.T__9 = 10;
NaviLexer.T__10 = 11;
NaviLexer.T__11 = 12;
NaviLexer.T__12 = 13;
NaviLexer.And = 14;
NaviLexer.As = 15;
NaviLexer.Def = 16;
NaviLexer.Else = 17;
NaviLexer.Enum = 18;
NaviLexer.If = 19;
NaviLexer.Intrinsic = 20;
NaviLexer.Let = 21;
NaviLexer.Match = 22;
NaviLexer.Not = 23;
NaviLexer.Or = 24;
NaviLexer.Struct = 25;
NaviLexer.Self = 26;
NaviLexer.Trait = 27;
NaviLexer.Discard = 28;
NaviLexer.IntInterval = 29;
NaviLexer.NonIntInterval = 30;
NaviLexer.IntervalInclusive = 31;
NaviLexer.IntervalMinExclusive = 32;
NaviLexer.IntervalMaxExclusive = 33;
NaviLexer.IntervalExclusive = 34;
NaviLexer.Number = 35;
NaviLexer.String = 36;
NaviLexer.Identifier = 37;
NaviLexer.OpMinus = 38;
NaviLexer.OpPlus = 39;
NaviLexer.OpMult = 40;
NaviLexer.OpDiv = 41;
NaviLexer.OpEqual = 42;
NaviLexer.OpNotEqual = 43;
NaviLexer.OpGt = 44;
NaviLexer.OpLt = 45;
NaviLexer.OpGte = 46;
NaviLexer.OpLte = 47;
NaviLexer.OpSpread = 48;
NaviLexer.Space = 49;
NaviLexer.LineComment = 50;
NaviLexer.BlockComment = 51;



