// Generated from src/antlr4/Navi.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,44,328,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,187,8,25,1,25,1,25,
3,25,191,8,25,1,25,1,25,3,25,195,8,25,1,25,1,25,1,26,3,26,200,8,26,1,26,
1,26,1,26,1,26,3,26,206,8,26,1,27,3,27,209,8,27,1,27,1,27,1,27,4,27,214,
8,27,11,27,12,27,215,3,27,218,8,27,1,27,1,27,3,27,222,8,27,1,27,3,27,225,
8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,237,8,27,1,28,
1,28,1,28,1,28,5,28,243,8,28,10,28,12,28,246,9,28,1,28,1,28,1,29,1,29,1,
29,5,29,253,8,29,10,29,12,29,256,9,29,3,29,258,8,29,1,30,1,30,1,31,1,31,
5,31,264,8,31,10,31,12,31,267,9,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,
1,41,1,41,1,42,1,42,1,42,1,42,1,43,4,43,298,8,43,11,43,12,43,299,1,43,1,
43,1,44,1,44,1,44,1,44,5,44,308,8,44,10,44,12,44,311,9,44,1,44,1,44,1,45,
1,45,1,45,1,45,5,45,319,8,45,10,45,12,45,322,9,45,1,45,1,45,1,45,1,45,1,
45,1,320,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
49,25,51,26,53,27,55,28,57,29,59,0,61,0,63,30,65,31,67,32,69,33,71,34,73,
35,75,36,77,37,79,38,81,39,83,40,85,41,87,42,89,43,91,44,1,0,10,1,0,48,57,
2,0,69,69,101,101,2,0,43,43,45,45,3,0,0,31,34,34,92,92,2,0,10,10,13,13,1,
0,49,57,3,0,48,57,65,70,97,102,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
122,3,0,9,10,13,13,32,32,346,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
0,91,1,0,0,0,1,93,1,0,0,0,3,95,1,0,0,0,5,97,1,0,0,0,7,99,1,0,0,0,9,101,1,
0,0,0,11,103,1,0,0,0,13,105,1,0,0,0,15,107,1,0,0,0,17,110,1,0,0,0,19,112,
1,0,0,0,21,114,1,0,0,0,23,116,1,0,0,0,25,118,1,0,0,0,27,121,1,0,0,0,29,124,
1,0,0,0,31,128,1,0,0,0,33,132,1,0,0,0,35,138,1,0,0,0,37,141,1,0,0,0,39,146,
1,0,0,0,41,153,1,0,0,0,43,158,1,0,0,0,45,168,1,0,0,0,47,173,1,0,0,0,49,179,
1,0,0,0,51,181,1,0,0,0,53,199,1,0,0,0,55,236,1,0,0,0,57,238,1,0,0,0,59,257,
1,0,0,0,61,259,1,0,0,0,63,261,1,0,0,0,65,268,1,0,0,0,67,270,1,0,0,0,69,272,
1,0,0,0,71,274,1,0,0,0,73,276,1,0,0,0,75,279,1,0,0,0,77,282,1,0,0,0,79,284,
1,0,0,0,81,286,1,0,0,0,83,289,1,0,0,0,85,292,1,0,0,0,87,297,1,0,0,0,89,303,
1,0,0,0,91,314,1,0,0,0,93,94,5,59,0,0,94,2,1,0,0,0,95,96,5,61,0,0,96,4,1,
0,0,0,97,98,5,123,0,0,98,6,1,0,0,0,99,100,5,44,0,0,100,8,1,0,0,0,101,102,
5,125,0,0,102,10,1,0,0,0,103,104,5,40,0,0,104,12,1,0,0,0,105,106,5,41,0,
0,106,14,1,0,0,0,107,108,5,61,0,0,108,109,5,62,0,0,109,16,1,0,0,0,110,111,
5,46,0,0,111,18,1,0,0,0,112,113,5,38,0,0,113,20,1,0,0,0,114,115,5,124,0,
0,115,22,1,0,0,0,116,117,5,58,0,0,117,24,1,0,0,0,118,119,5,58,0,0,119,120,
5,58,0,0,120,26,1,0,0,0,121,122,5,97,0,0,122,123,5,115,0,0,123,28,1,0,0,
0,124,125,5,100,0,0,125,126,5,101,0,0,126,127,5,102,0,0,127,30,1,0,0,0,128,
129,5,108,0,0,129,130,5,101,0,0,130,131,5,116,0,0,131,32,1,0,0,0,132,133,
5,109,0,0,133,134,5,97,0,0,134,135,5,116,0,0,135,136,5,99,0,0,136,137,5,
104,0,0,137,34,1,0,0,0,138,139,5,105,0,0,139,140,5,102,0,0,140,36,1,0,0,
0,141,142,5,101,0,0,142,143,5,108,0,0,143,144,5,115,0,0,144,145,5,101,0,
0,145,38,1,0,0,0,146,147,5,115,0,0,147,148,5,116,0,0,148,149,5,114,0,0,149,
150,5,117,0,0,150,151,5,99,0,0,151,152,5,116,0,0,152,40,1,0,0,0,153,154,
5,101,0,0,154,155,5,110,0,0,155,156,5,117,0,0,156,157,5,109,0,0,157,42,1,
0,0,0,158,159,5,105,0,0,159,160,5,110,0,0,160,161,5,116,0,0,161,162,5,114,
0,0,162,163,5,105,0,0,163,164,5,110,0,0,164,165,5,115,0,0,165,166,5,105,
0,0,166,167,5,99,0,0,167,44,1,0,0,0,168,169,5,115,0,0,169,170,5,101,0,0,
170,171,5,108,0,0,171,172,5,102,0,0,172,46,1,0,0,0,173,174,5,116,0,0,174,
175,5,114,0,0,175,176,5,97,0,0,176,177,5,105,0,0,177,178,5,116,0,0,178,48,
1,0,0,0,179,180,5,95,0,0,180,50,1,0,0,0,181,182,5,105,0,0,182,183,5,110,
0,0,183,184,5,116,0,0,184,186,1,0,0,0,185,187,3,87,43,0,186,185,1,0,0,0,
186,187,1,0,0,0,187,188,1,0,0,0,188,190,5,40,0,0,189,191,3,87,43,0,190,189,
1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,194,3,53,26,0,193,195,3,87,43,
0,194,193,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,5,41,0,0,197,52,
1,0,0,0,198,200,3,55,27,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,
0,201,202,5,46,0,0,202,203,5,46,0,0,203,205,1,0,0,0,204,206,3,55,27,0,205,
204,1,0,0,0,205,206,1,0,0,0,206,54,1,0,0,0,207,209,5,45,0,0,208,207,1,0,
0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,217,3,59,29,0,211,213,5,46,0,0,212,
214,7,0,0,0,213,212,1,0,0,0,214,215,1,0,0,0,215,213,1,0,0,0,215,216,1,0,
0,0,216,218,1,0,0,0,217,211,1,0,0,0,217,218,1,0,0,0,218,224,1,0,0,0,219,
221,7,1,0,0,220,222,7,2,0,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,
0,0,223,225,3,59,29,0,224,219,1,0,0,0,224,225,1,0,0,0,225,237,1,0,0,0,226,
227,5,105,0,0,227,228,5,110,0,0,228,237,5,102,0,0,229,230,5,45,0,0,230,231,
5,105,0,0,231,232,5,110,0,0,232,237,5,102,0,0,233,234,5,110,0,0,234,235,
5,97,0,0,235,237,5,110,0,0,236,208,1,0,0,0,236,226,1,0,0,0,236,229,1,0,0,
0,236,233,1,0,0,0,237,56,1,0,0,0,238,244,5,34,0,0,239,243,8,3,0,0,240,241,
5,92,0,0,241,243,8,4,0,0,242,239,1,0,0,0,242,240,1,0,0,0,243,246,1,0,0,0,
244,242,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,244,1,0,0,0,247,248,
5,34,0,0,248,58,1,0,0,0,249,258,5,48,0,0,250,254,7,5,0,0,251,253,7,0,0,0,
252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,258,
1,0,0,0,256,254,1,0,0,0,257,249,1,0,0,0,257,250,1,0,0,0,258,60,1,0,0,0,259,
260,7,6,0,0,260,62,1,0,0,0,261,265,7,7,0,0,262,264,7,8,0,0,263,262,1,0,0,
0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,64,1,0,0,0,267,265,
1,0,0,0,268,269,5,45,0,0,269,66,1,0,0,0,270,271,5,43,0,0,271,68,1,0,0,0,
272,273,5,42,0,0,273,70,1,0,0,0,274,275,5,47,0,0,275,72,1,0,0,0,276,277,
5,61,0,0,277,278,5,61,0,0,278,74,1,0,0,0,279,280,5,33,0,0,280,281,5,61,0,
0,281,76,1,0,0,0,282,283,5,62,0,0,283,78,1,0,0,0,284,285,5,60,0,0,285,80,
1,0,0,0,286,287,5,62,0,0,287,288,5,61,0,0,288,82,1,0,0,0,289,290,5,60,0,
0,290,291,5,61,0,0,291,84,1,0,0,0,292,293,5,46,0,0,293,294,5,46,0,0,294,
295,5,46,0,0,295,86,1,0,0,0,296,298,7,9,0,0,297,296,1,0,0,0,298,299,1,0,
0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,302,6,43,0,0,302,
88,1,0,0,0,303,304,5,47,0,0,304,305,5,47,0,0,305,309,1,0,0,0,306,308,8,4,
0,0,307,306,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,
312,1,0,0,0,311,309,1,0,0,0,312,313,6,44,0,0,313,90,1,0,0,0,314,315,5,47,
0,0,315,316,5,42,0,0,316,320,1,0,0,0,317,319,9,0,0,0,318,317,1,0,0,0,319,
322,1,0,0,0,320,321,1,0,0,0,320,318,1,0,0,0,321,323,1,0,0,0,322,320,1,0,
0,0,323,324,5,42,0,0,324,325,5,47,0,0,325,326,1,0,0,0,326,327,6,45,0,0,327,
92,1,0,0,0,20,0,186,190,194,199,205,208,215,217,221,224,236,242,244,254,
257,265,299,309,320,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class NaviLexer extends antlr4.Lexer {

    static grammarFileName = "Navi.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "'='", "'{'", "','", "'}'", "'('", 
                         "')'", "'=>'", "'.'", "'&'", "'|'", "':'", "'::'", 
                         "'as'", "'def'", "'let'", "'match'", "'if'", "'else'", 
                         "'struct'", "'enum'", "'intrinsic'", "'self'", 
                         "'trait'", "'_'", null, null, null, null, null, 
                         "'-'", "'+'", "'*'", "'/'", "'=='", "'!='", "'>'", 
                         "'<'", "'>='", "'<='", "'...'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, "As", "Def", 
                          "Let", "Match", "If", "Else", "Struct", "Enum", 
                          "Intrinsic", "Self", "Trait", "Discard", "IntInterval", 
                          "Interval", "Number", "String", "Identifier", 
                          "OpMinus", "OpPlus", "OpMult", "OpDiv", "OpEqual", 
                          "OpNotEqual", "OpGt", "OpLt", "OpGte", "OpLte", 
                          "OpSpread", "Space", "LineComment", "BlockComment" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "As", "Def", "Let", "Match", "If", "Else", "Struct", 
                      "Enum", "Intrinsic", "Self", "Trait", "Discard", "IntInterval", 
                      "Interval", "Number", "String", "DIGITS", "HEX", "Identifier", 
                      "OpMinus", "OpPlus", "OpMult", "OpDiv", "OpEqual", 
                      "OpNotEqual", "OpGt", "OpLt", "OpGte", "OpLte", "OpSpread", 
                      "Space", "LineComment", "BlockComment" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

NaviLexer.EOF = antlr4.Token.EOF;
NaviLexer.T__0 = 1;
NaviLexer.T__1 = 2;
NaviLexer.T__2 = 3;
NaviLexer.T__3 = 4;
NaviLexer.T__4 = 5;
NaviLexer.T__5 = 6;
NaviLexer.T__6 = 7;
NaviLexer.T__7 = 8;
NaviLexer.T__8 = 9;
NaviLexer.T__9 = 10;
NaviLexer.T__10 = 11;
NaviLexer.T__11 = 12;
NaviLexer.T__12 = 13;
NaviLexer.As = 14;
NaviLexer.Def = 15;
NaviLexer.Let = 16;
NaviLexer.Match = 17;
NaviLexer.If = 18;
NaviLexer.Else = 19;
NaviLexer.Struct = 20;
NaviLexer.Enum = 21;
NaviLexer.Intrinsic = 22;
NaviLexer.Self = 23;
NaviLexer.Trait = 24;
NaviLexer.Discard = 25;
NaviLexer.IntInterval = 26;
NaviLexer.Interval = 27;
NaviLexer.Number = 28;
NaviLexer.String = 29;
NaviLexer.Identifier = 30;
NaviLexer.OpMinus = 31;
NaviLexer.OpPlus = 32;
NaviLexer.OpMult = 33;
NaviLexer.OpDiv = 34;
NaviLexer.OpEqual = 35;
NaviLexer.OpNotEqual = 36;
NaviLexer.OpGt = 37;
NaviLexer.OpLt = 38;
NaviLexer.OpGte = 39;
NaviLexer.OpLte = 40;
NaviLexer.OpSpread = 41;
NaviLexer.Space = 42;
NaviLexer.LineComment = 43;
NaviLexer.BlockComment = 44;



